## Software Documentation

### Necessary Software Installation
The programmes necessary to run the robot are built over python 3.9. So python 3.9 installation is highly recommended. However, other later versions of python can also be used. But, some libraries and modules might not work as intended,a dn furhter optimizationa dn implementation might be required.

Python version: `python 3.9`


#### Development Environment Setup
The overall system is built over Ubuntu 22.04 Operating system. In order to setup python `apt` package is used.

To install python 3.9, the steps mentioned below can be followed:

1. `sudo apt update`    +
2. `sudo apt install software-properties-common`    +
3. `sudo add-apt-repository ppa:deadsnakes/ppa`     +
4. `sudo apt install python3.9`     +

##### Install distutils for python 3.9
`sudo apt install python3.9-distutils`  +

##### Install pip3.9 
``
wget https://bootstrap.pypa.io/get-pip.py   +
python3.9 get-pip.py    +
echo 'export PATH=~/.local/bin/:$PATH' >> ~/.bashrc +
source ~/.bashrc    +
``

### Used Modules and Libraries
#### Libraries
`Numpy` for mathematical arrays and storing data for image processing operations and iterating over the objects     +
`OpenCV` to interfce the in-built libraries for computer vision     +
`Pyrealsense2` to interfc the Realsense Camera and its configurations   +
`Pyserial` for serial communication with the STM32 microcontoller over USB      +

#### Modules
##### Color.py
This program stores the data of the colors that are detected after configuring using the `config_colors.py` program.    +

##### config_color.py
This program is used mainly to configure colors for various objects in the camera frame, such as balls, court, baskets, etc.

##### image_processor.py
This is the module responsible for the image processing operations and detecting colors for image segmentation. This module produces the processed iamge frame and all of its objects necessary for further analysis and processing.

##### robot_State.py
An enum class defined to set the state at which the robot may be at an isntant.

##### api.py
The python module responsible to communicate serially with the STM32 microcontroller over USB. This module finds the USB device dynamically.

##### state_machine.py
The module which detects the state of teh robot at any current instant, taking the processed frame inputs from the `main.py` module, and acting accordingly waht to do when a robot is in a particular state, i.e., whether to advance forward, por turn, or stay still.

##### main.py
The main module which initiates the image processing module and generates a processed frame and forwards this processed frame to the `state_machine.py`module. This module is also responsible to print messages in the prompt and broadcast the current image frame (as a live stream in the screen indicating the objects, such as: largest ball, specific baskets, etc).

### How to run the robot
Firstly, run the `config_colors.py` program to configure colors for various objects, like: balls, court, baskets(for particular color), white/balck lines, etc.

After configuring the colors, run the `main.py` program. This program creates an image frame and processes the frame with the current configurations and generates a processed frame which is feeded to the `state_machine.py` module which acts accordingly as per the current state of the motion, executing a state machine logic.

### Game Logic

 